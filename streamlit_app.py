import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
from calculator import NitrogenCalculator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–†–∞—Å—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∑–æ—Ç–∞",
    page_icon="üß™",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üß™ –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∑–æ—Ç–∞ (PSA)")

# –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
    st.header("–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    p_n2 = st.number_input("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∑–æ—Ç–∞ (–ù–º¬≥/—á)", min_value=0.1, value=100.0, step=10.0)
    purity = st.number_input("–ß–∏—Å—Ç–æ—Ç–∞ –∞–∑–æ—Ç–∞ (%)", min_value=95.0, max_value=100.0, value=99.5, step=0.1)
    pressure = st.number_input("–†–∞–±–æ—á–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–±–∞—Ä)", min_value=1.0, max_value=20.0, value=8.0, step=0.5)
    calculate_btn = st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
calculator = NitrogenCalculator()

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
if calculate_btn:
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    results = calculator.calculate(p_n2, purity, pressure)
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if results["warnings"]:
        for warning in results["warnings"]:
            st.warning(warning)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∑–æ—Ç–∞", f"{results['p_n2']:.2f} –ù–º¬≥/—á")
        st.metric("–ß–∏—Å—Ç–æ—Ç–∞ –∞–∑–æ—Ç–∞", f"{results['purity']:.2f} %")
        st.metric("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è O‚ÇÇ", f"{results['o2_ppm']:.0f} ppm")
    with col2:
        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (Œ∑)", f"{results['eta'] * 100:.1f} %")
        st.metric("–¢—Ä–µ–±—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞", f"{results['q_air']:.1f} –ù–º¬≥/—á")
        st.metric("–£–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞", f"{results['specific_flow']:.2f} –ù–º¬≥/–ù–º¬≥ –∞–∑–æ—Ç–∞")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if results.get("recommendations"):
        st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for rec in results["recommendations"]:
            st.info(rec)
    
    # –ü–æ–¥–±–æ—Ä –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–æ–≤ (–µ—Å–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ <= 9.5 –±–∞—Ä)
    if "compressor_model" in results:
        st.subheader("–ü–æ–¥–±–æ—Ä –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–æ–≤")
        st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å:** {results['compressor_model']}")
        st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {results['compressor_count']} —à—Ç.")
        st.write(f"**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞:** {results['flow_per_unit']:.1f} –º¬≥/–º–∏–Ω")
        st.write(f"**–°—É–º–º–∞—Ä–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {results['total_flow']:.1f} –º¬≥/–º–∏–Ω")
        st.write(f"**–ò–∑–±—ã—Ç–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** {results['excess']:.2f} –º¬≥/–º–∏–Ω")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if results.get("alternatives"):
            st.subheader("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")
            for alt in results["alternatives"]:
                st.write(f"- **–ú–æ–¥–µ–ª—å {alt[0]}**: {alt[1]} —à—Ç. (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {alt[2]} –º¬≥/–º–∏–Ω)")
    
    # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç —á–∏—Å—Ç–æ—Ç—ã
    st.subheader("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–∑–¥—É—Ö–∞ –æ—Ç —á–∏—Å—Ç–æ—Ç—ã –∞–∑–æ—Ç–∞")
    fig, ax = plt.subplots()
    
    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    purities = np.linspace(95, 99.999, 50)
    air_flows = []
    
    # –î–ª—è –∫–∞–∂–¥–æ–π —á–∏—Å—Ç–æ—Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥
    for p in purities:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—Å—á–µ—Ç–µ
        purities_sorted = sorted(NitrogenCalculator.PURITY_DATA.keys())
        lower = max([p_val for p_val in purities_sorted if p_val <= p], default=95.0)
        upper = min([p_val for p_val in purities_sorted if p_val >= p], default=99.999)
        
        if p in NitrogenCalculator.PURITY_DATA:
            eta = NitrogenCalculator.PURITY_DATA[p]["eta"]
        else:
            eta_lower = NitrogenCalculator.PURITY_DATA[lower]["eta"]
            eta_upper = NitrogenCalculator.PURITY_DATA[upper]["eta"]
            eta = eta_lower + (eta_upper - eta_lower) * ((p - lower) / (upper - lower))
        
        q_air = p_n2 / (eta * calculator.C_N2)
        air_flows.append(q_air)
    
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    ax.plot(purities, air_flows, 'b-', linewidth=2)
    
    # –û—Ç–º–µ—á–∞–µ–º —Ç–æ—á–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    ax.plot(results["purity"], results["q_air"], 'ro', markersize=8)
    ax.annotate(
        f'–¢–µ–∫—É—â–∏–π —Ä–∞—Å—á–µ—Ç\n({results["purity"]}%, {results["q_air"]:.1f} –ù–º¬≥/—á)',
        xy=(results["purity"], results["q_air"]),
        xytext=(results["purity"] - 1, results["q_air"] + 50),
        arrowprops=dict(facecolor='black', shrink=0.05)
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_xlabel("–ß–∏—Å—Ç–æ—Ç–∞ –∞–∑–æ—Ç–∞ (%)")
    ax.set_ylabel("–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ (–ù–º¬≥/—á)")
    ax.grid(True, linestyle='--', alpha=0.7)
    
    st.pyplot(fig)

# –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
else:
    st.info("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'")